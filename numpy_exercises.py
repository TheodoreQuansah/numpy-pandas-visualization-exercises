{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acec17ac-7bc2-40bb-a7ca-a4d0ba03d720",
   "metadata": {},
   "outputs": [],
   "source": [
    "{\n",
    " \"cells\": [\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"d409a487-66b9-4921-a46b-20e72e73369e\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Use the following code for the questions below:\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 5,\n",
    "   \"id\": \"c0518a85-e13c-42dd-83dd-d816bc00fffb\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"import numpy as np\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 314,\n",
    "   \"id\": \"d1008b0c-359c-4f10-9133-ddf8c5b1ae9a\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"a = np.array([4, 10, 12, 23, -2, -1, 0, 0, 0, -6, 3, -7])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": null,\n",
    "   \"id\": \"a3afea91-9808-43f2-90f3-373a6dd5301f\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"How many negative numbers are there?\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 53,\n",
    "   \"id\": \"58a883bd-e164-4ac9-8360-e2a522f6fae0\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"neg_no = a[a < 0]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 315,\n",
    "   \"id\": \"21d47469-9970-4340-8f06-a2dabcca26a0\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"4\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 315,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"len(neg_no)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"ec07a9b1-42e5-4f0e-87bf-2c67983ee9a7\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"How many positive numbers are there?\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 55,\n",
    "   \"id\": \"f8459285-b552-4caa-b098-52b131ab2aeb\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [],\n",
    "   \"source\": [\n",
    "    \"pos_no = a[a > 0]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 56,\n",
    "   \"id\": \"5c5a9044-bb92-446a-90a6-67484ae94042\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"5\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 56,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"len(pos_no)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f38e762d-a116-4cde-9dfe-274c198264f8\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"How many even positive numbers are there?\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 58,\n",
    "   \"id\": \"dfe77c31-2443-4857-8dd4-359c9d65e7d5\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 58,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"\\n\",\n",
    "    \"pos_no = a[a > 0]\\n\",\n",
    "    \"\\n\",\n",
    "    \"even_pos_no = pos_no[pos_no % 2 == 0]\\n\",\n",
    "    \"\\n\",\n",
    "    \"len(even_pos_no)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"a042b483-6d2b-4082-af3d-6f3421574d3f\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"If you were to add 3 to each data point, how many positive numbers would there be?\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 68,\n",
    "   \"id\": \"ef7de559-eaaa-4807-b642-1c7fc9cc062d\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"10\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 68,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"b = a + 3\\n\",\n",
    "    \"pos_no2 = b[b>0]\\n\",\n",
    "    \"len(pos_no2)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"0373c1b8-184e-440a-ab2f-d5146e0ce79b\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"If you squared each number, what would the new mean and standard deviation be?\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 82,\n",
    "   \"id\": \"b3eee203-4fce-40fa-afcf-a0bcf03530e2\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"(144.0243035046516, 74.0)\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 82,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c = a ** 2\\n\",\n",
    "    \"c_std = c.std()\\n\",\n",
    "    \"c_mean = c.mean()\\n\",\n",
    "    \"c_std, c_mean\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f1cb0c62-fdcc-4f3f-a883-473b305d8e8b\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"A common statistical operation on a dataset is centering. \\n\",\n",
    "    \"\\n\",\n",
    "    \"This means to adjust the data such that the mean of the data is 0.\\n\",\n",
    "    \"\\n\",\n",
    "    \"This is done by subtracting the mean from each data point. Center the data set. See this link for more on centering.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 95,\n",
    "   \"id\": \"0faf729c-4ac9-4196-bc3b-21b1fc72e363\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"0.0\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 95,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a_mean = int(a.mean())\\n\",\n",
    "    \"d = a - a_mean\\n\",\n",
    "    \"d.mean()\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f19b5e3a-dfc5-48c4-b166-2fc154c23bd2\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Calculate the z-score for each data point. Recall that the z-score is given by:\\n\",\n",
    "    \"\\n\",\n",
    "    \"Z = (x - μ) / σ\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 100,\n",
    "   \"id\": \"c35414eb-ac21-4515-9a48-29314bf9e640\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([ 0.12403473,  0.86824314,  1.11631261,  2.48069469, -0.62017367,\\n\",\n",
    "       \"       -0.49613894, -0.3721042 , -0.3721042 , -0.3721042 , -1.11631261,\\n\",\n",
    "       \"        0.        , -1.24034735])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 100,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"z = (a - a_mean) / a_std\\n\",\n",
    "    \"z\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"732be10b-81f2-44f3-b9dd-bb0bbe4c28c7\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"\\n\",\n",
    "    \"\\n\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"535f8026-7ef6-4db1-b30e-27701f2ebc32\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"# Setup 1\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"08e96a32-86bc-4a99-baba-256b9f53d3e5\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Use python's built in functionality/operators to determine the following:\\n\",\n",
    "    \"\\n\",\n",
    "    \"Exercise 1 - Make a variable called sum_of_a to hold the sum of all the numbers in above list\\n\",\n",
    "    \"\\n\",\n",
    "    \"a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 258,\n",
    "   \"id\": \"74f35a36-5e8c-4b23-986c-87644a3b8908\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"55\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 258,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a_sum = sum(a)\\n\",\n",
    "    \"a_sum\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 306,\n",
    "   \"id\": \"0e995afe-758e-460b-93a1-fc8d994519d1\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"55\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 306,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a =  np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\\n\",\n",
    "    \"sum_of_a = a.sum() \\n\",\n",
    "    \"sum_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"737bc141-61ef-4c16-b463-c41fca47597b\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 2 - Make a variable named min_of_a to hold the minimum of all the numbers in the above list\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 254,\n",
    "   \"id\": \"81549b63-0a72-439b-8883-eb46d08b23f2\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"1\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 254,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"min(a)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 112,\n",
    "   \"id\": \"60ed68fd-3224-4b8c-9b8a-cbebcf12090a\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"1\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 112,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"min_of_a = a.min()\\n\",\n",
    "    \"min_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f7eb96a1-bbaa-42dc-9be5-0b65abe07e61\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 3 - Make a variable named max_of_a to hold the max number of all the numbers in the above list\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 255,\n",
    "   \"id\": \"018879ce-e5d2-460e-9251-5dcc8b120970\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"10\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 255,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"max(a)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 114,\n",
    "   \"id\": \"dfb5a1ef-106a-443f-8642-07a3c57ba1f7\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"10\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 114,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"max_of_a = a.max()\\n\",\n",
    "    \"max_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f19a83d3-dfbb-41a2-8e7f-b4e1ecfcbe5f\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Make a variable named mean_of_a to hold the average of all the numbers in the above list\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 261,\n",
    "   \"id\": \"09d126a9-a967-43b9-bd33-9798bafa78d7\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"5.5\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 261,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a_mean = a_sum / len(a)\\n\",\n",
    "    \"a_mean\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 120,\n",
    "   \"id\": \"983cd0e7-7104-4ec4-a3a4-d3262e716c7f\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"5.5\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 120,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"mean_of_a = a.mean()\\n\",\n",
    "    \"mean_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"75f393ec-3829-4f02-a99e-ed72ede49b04\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Make a variable named product_of_a to hold the product of multiplying all the numbers in the above list together\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 268,\n",
    "   \"id\": \"9aedb9f1-391d-4748-a8f7-191194526380\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3628800\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 268,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a[0]*a[1]*a[2]*a[3]*a[4]*a[5]*a[6]*a[7]*a[8]*a[9]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 125,\n",
    "   \"id\": \"5e87bb86-5037-474b-8cbb-01c3093ccd54\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3628800\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 125,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"product_of_a = a.prod()\\n\",\n",
    "    \"product_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"b4bb7597-c05b-4c64-b96d-555e7f4a9e5e\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Make a variable named squares_of_a. It should hold each number in a squared like [1, 4, 9, 16, 25...]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 269,\n",
    "   \"id\": \"d471171c-94b8-447f-b8cc-dc3c74de5ef5\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 269,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 272,\n",
    "   \"id\": \"3b348391-31f6-4eb5-9cb2-546cff4faaf3\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 272,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"(a[0]**2), a[1]**2, a[2]**2, a[3]**2, a[4]**2, a[5]**2, a[6]**2, a[7]**2, a[8]**2, a[9]**2\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 129,\n",
    "   \"id\": \"1a40fc5a-3ac0-46ce-bf8c-0010cf83cacd\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([  1,   4,   9,  16,  25,  36,  49,  64,  81, 100])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 129,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"squares_of_a = a**2\\n\",\n",
    "    \"squares_of_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"59ddaa98-43a3-47d1-9c2c-1decef5add6f\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Make a variable named odds_in_a. It should hold only the odd numbers\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 311,\n",
    "   \"id\": \"9315a383-d39b-4431-90a4-2726d7439da0\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"[1, 3, 5, 7, 9]\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"def find_odd(num):\\n\",\n",
    "    \"    a_odd = []\\n\",\n",
    "    \"    for number in num:\\n\",\n",
    "    \"        if number % 2 != 0:\\n\",\n",
    "    \"            a_odd.append(number)\\n\",\n",
    "    \"    return a_odd\\n\",\n",
    "    \"a_odd = find_odd(a)\\n\",\n",
    "    \"print(a_odd)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 307,\n",
    "   \"id\": \"37bca7c9-de4d-4586-93fa-ab3ec790eeb7\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([1, 3, 5, 7, 9])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 307,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"odds_in_a = a[a % 2 != 0]\\n\",\n",
    "    \"odds_in_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"56d58da9-ed74-4f16-a9d6-5abbbe5127d9\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Make a variable named evens_in_a. It should hold only the evens.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 309,\n",
    "   \"id\": \"d21d2068-a6dc-4b45-ba6c-d2f61c290935\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"name\": \"stdout\",\n",
    "     \"output_type\": \"stream\",\n",
    "     \"text\": [\n",
    "      \"[2, 4, 6, 8, 10]\\n\"\n",
    "     ]\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"def find_even(num):\\n\",\n",
    "    \"    a_even = []\\n\",\n",
    "    \"    for number in num:\\n\",\n",
    "    \"        if number % 2 == 0:\\n\",\n",
    "    \"            a_even.append(number)\\n\",\n",
    "    \"    return a_even\\n\",\n",
    "    \"a_even = find_even(a)\\n\",\n",
    "    \"print(a_even)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 133,\n",
    "   \"id\": \"7583d677-16ae-4b44-a332-a6d601ba23c7\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([ 2,  4,  6,  8, 10])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 133,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"evens_in_a = a[a % 2 == 0]\\n\",\n",
    "    \"evens_in_a\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"41e998e4-eef6-403b-96c2-1e17a5de52e0\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"# Setup 2: \"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"60f45ea8-9003-45e3-ba4e-ebd1e9c9b63c\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"#What about life in two dimensions? A list of lists is matrix, a table, a spreadsheet, a chessboard...\\n\",\n",
    "    \"\\n\",\n",
    "    \"Consider what it would take to find the sum, min, max, average, sum, product, and list of squares for this list of two lists.\\n\",\n",
    "    \"\\n\",\n",
    "    \"b = [\\n\",\n",
    "    \"    [3, 4, 5],\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [6, 7, 8]\\n\",\n",
    "    \"]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"065ac012-1ccc-4b38-a98f-c2a2cd0dbdff\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 1 - refactor the following to use numpy. Use sum_of_b as the variable. **Hint, you'll first need to make sure that the \\\"b\\\" variable is a numpy array**\\n\",\n",
    "    \" \\n\",\n",
    "    \"sum_of_b = 0\\n\",\n",
    "    \"\\n\",\n",
    "    \"for row in b:\\n\",\n",
    "    \"\\n\",\n",
    "    \"    sum_of_b += sum(row)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 168,\n",
    "   \"id\": \"c584ec4e-f382-471f-b539-2b138af34fa7\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"33\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 168,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"b = np.array([\\n\",\n",
    "    \"    [3, 4, 5],\\n\",\n",
    "    \"    [6, 7, 8]\\n\",\n",
    "    \"])\\n\",\n",
    "    \"sum_of_b = b.sum()\\n\",\n",
    "    \"sum_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"672d27c6-ced8-49ca-9f3c-9110d8ecb5e2\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 2 - refactor the following to use numpy. \\n\",\n",
    "    \"\\n\",\n",
    "    \"min_of_b = min(b[0])\\n\",\n",
    "    \"\\n\",\n",
    "    \"if min(b[0]) <= min(b[1]) \\n\",\n",
    "    \"\\n\",\n",
    "    \"else min(b[1])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 169,\n",
    "   \"id\": \"06d2d267-d363-42c9-afc1-d9413d3157a5\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"3\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 169,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"min_of_b = b.min()\\n\",\n",
    "    \"min_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"4c739a34-fae9-484a-abe7-232e50780264\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 3 - refactor the following maximum calculation to find the answer with numpy.\\n\",\n",
    "    \"\\n\",\n",
    "    \"max_of_b = max(b[0])\\n\",\n",
    "    \"\\n\",\n",
    "    \"if max(b[0]) >= max(b[1])\\n\",\n",
    "    \"\\n\",\n",
    "    \"else max(b[1])\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 158,\n",
    "   \"id\": \"ba1149c6-e42a-4c86-91cd-ad0064031383\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"8\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 158,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"max_of_b = b.max()\\n\",\n",
    "    \"max_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"0bcac7ce-9f68-4c3d-8dbf-ec6d98396c81\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 4 - refactor the following using numpy to find the mean of b\\n\",\n",
    "    \"\\n\",\n",
    "    \"mean_of_b = \\n\",\n",
    "    \"\\n\",\n",
    "    \"(sum(b[0]) + sum(b[1])) / (len(b[0]) + len(b[1]))\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 161,\n",
    "   \"id\": \"14213465-d06a-43db-9acf-4b2e2708f62a\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"5.5\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 161,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"mean_of_b = b.mean()\\n\",\n",
    "    \"mean_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"6ffb9781-202d-445a-9a43-37c09b77f5f6\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 5 - refactor the following to use numpy for calculating the product of all numbers multiplied together.\\n\",\n",
    "    \" \\n\",\n",
    "    \"product_of_b = 1\\n\",\n",
    "    \"for row in b:\\n\",\n",
    "    \"    for number in row:\\n\",\n",
    "    \"        product_of_b *= number\\n\",\n",
    "    \"product_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 164,\n",
    "   \"id\": \"0cac75da-2d45-4669-8aaa-b1babf22a367\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"20160\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 164,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"product_of_b = b.prod()\\n\",\n",
    "    \"product_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"41ffa08b-20fb-4ac2-ab77-30f5aa99d3ae\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 6 - refactor the following to use numpy to find the list of squares \\n\",\n",
    "    \" \\n\",\n",
    "    \"squares_of_b = []\\n\",\n",
    "    \"\\n\",\n",
    "    \"for row in b:\\n\",\n",
    "    \"\\n\",\n",
    "    \"    for number in row:\\n\",\n",
    "    \"    \\n\",\n",
    "    \"        squares_of_b.append(number**2)\\n\",\n",
    "    \"        \\n\",\n",
    "    \"squares_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 167,\n",
    "   \"id\": \"c849c313-32db-4f00-9a66-fdd782658b25\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 9, 16, 25],\\n\",\n",
    "       \"       [36, 49, 64]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 167,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"squares_of_b = b**2\\n\",\n",
    "    \"squares_of_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"7b337f81-6dd2-4d79-aca0-7ff9fe73ae0d\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 7 - refactor using numpy to determine the odds_in_b\\n\",\n",
    "    \"\\n\",\n",
    "    \"odds_in_b = []\\n\",\n",
    "    \"\\n\",\n",
    "    \"for row in b:\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    for number in row:\\n\",\n",
    "    \"        \\n\",\n",
    "    \"        if(number % 2 != 0):\\n\",\n",
    "    \"            \\n\",\n",
    "    \"            odds_in_b.append(number)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 171,\n",
    "   \"id\": \"e662acf3-eb98-4828-9728-84b95c7345e4\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([3, 5, 7])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 171,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"odds_in_b = b[b % 2 != 0]\\n\",\n",
    "    \"odds_in_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"b02c96f8-22a7-4e73-a0fe-7320911656a2\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 8 - refactor the following to use numpy to filter only the even numbers\\n\",\n",
    "    \"\\n\",\n",
    "    \"evens_in_b = []\\n\",\n",
    "    \"\\n\",\n",
    "    \"for row in b:\\n\",\n",
    "    \"\\n\",\n",
    "    \"    for number in row:\\n\",\n",
    "    \"    \\n\",\n",
    "    \"        if(number % 2 == 0):\\n\",\n",
    "    \"        \\n\",\n",
    "    \"            evens_in_b.append(number)\\n\",\n",
    "    \"            \\n\",\n",
    "    \"evens_in_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 174,\n",
    "   \"id\": \"23e9f9cf-1e4a-4e14-860c-a45bd720f866\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([4, 6, 8])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 174,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"evens_in_b = b[b % 2 == 0]\\n\",\n",
    "    \"evens_in_b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"c6a89f54-c18c-41fb-93a7-a02cf7207135\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 9 - print out the shape of the array b.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 175,\n",
    "   \"id\": \"50a41280-6a4d-4da4-a57b-b3657438344d\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[3, 4, 5],\\n\",\n",
    "       \"       [6, 7, 8]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 175,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"b\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"c9fe88d3-af22-4e1a-bfd5-2842383ff171\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 10 - transpose the array b.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 196,\n",
    "   \"id\": \"06cd16c2-1328-43cc-8341-e97b3c80d871\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[3, 6],\\n\",\n",
    "       \"       [4, 7],\\n\",\n",
    "       \"       [5, 8]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 196,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"b_trans = b.transpose()\\n\",\n",
    "    \"b_trans\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"95119ffd-c0f5-4e7d-a3ca-be71d11791e3\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 11 - reshape the array b to be a single list of 6 numbers. (1 x 6)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 182,\n",
    "   \"id\": \"782f5904-3814-4e7b-ad42-4d8f7ff8e5a4\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([3, 4, 5, 6, 7, 8])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 182,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"sin_lst = b.ravel()\\n\",\n",
    "    \"sin_lst\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"a9e43152-ee98-4636-9f0d-76d8cc9bfd0f\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 12 - reshape the array b to be a list of 6 lists, each containing only 1 number (6 x 1)\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 184,\n",
    "   \"id\": \"f1a6e847-e4ed-4b90-ab09-d49d179b501b\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[3],\\n\",\n",
    "       \"       [4],\\n\",\n",
    "       \"       [5],\\n\",\n",
    "       \"       [6],\\n\",\n",
    "       \"       [7],\\n\",\n",
    "       \"       [8]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 184,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"six_lst = np.reshape(b, (6, -1))\\n\",\n",
    "    \"six_lst\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"91696174-5aba-4d3a-95f2-60efd193c0e0\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"# Setup 3\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"ae3af0d9-2609-4cfc-bf8e-3cc62ef12af2\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"c = [\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [1, 2, 3],\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [4, 5, 6],\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [7, 8, 9]\\n\",\n",
    "    \"    \\n\",\n",
    "    \"]\\n\",\n",
    "    \"\\n\",\n",
    "    \"HINT, you'll first need to make sure that the \\\"c\\\" variable is a numpy array prior to using numpy array methods.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 187,\n",
    "   \"id\": \"b5ad476b-4e57-4038-b714-835f9b2aeecf\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[1, 2, 3],\\n\",\n",
    "       \"       [4, 5, 6],\\n\",\n",
    "       \"       [7, 8, 9]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 187,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c = np.array([\\n\",\n",
    "    \"    [1, 2, 3],\\n\",\n",
    "    \"    [4, 5, 6],\\n\",\n",
    "    \"    [7, 8, 9]\\n\",\n",
    "    \"])\\n\",\n",
    "    \"c\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"a726f2a0-917d-466c-82a3-cb92b255a63a\",\n",
    "   \"metadata\": {\n",
    "    \"tags\": []\n",
    "   },\n",
    "   \"source\": [\n",
    "    \"Exercise 1 - Find the min, max, sum, and product of c.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 191,\n",
    "   \"id\": \"ec04572b-3ade-4a13-953b-480cdfca7347\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"(1, 9, 45, 362880)\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 191,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_min = c.min()\\n\",\n",
    "    \"c_max = c.max()\\n\",\n",
    "    \"c_sum = c.sum()\\n\",\n",
    "    \"c_prod = c.prod()\\n\",\n",
    "    \"c_min, c_max, c_sum, c_prod\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"9a3b97d6-9508-43a3-bce5-bf63966b52d8\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 2 - Determine the standard deviation of c.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 192,\n",
    "   \"id\": \"957012f4-ea42-4743-b885-675daaceab1a\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"2.581988897471611\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 192,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_std = c.std()\\n\",\n",
    "    \"c_std\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"f3462a6d-7435-4a2f-98b6-46f1da7aeeb0\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 3 - Determine the variance of c.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 194,\n",
    "   \"id\": \"f89e0427-c27a-4e14-bf94-d7a463ca9ab2\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"6.666666666666667\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 194,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_var = c.var()\\n\",\n",
    "    \"c_var\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"3f3e560d-0aaf-4dff-8b9d-ce77f93d0275\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Print out the shape of the array c\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 198,\n",
    "   \"id\": \"b71d16cd-f556-4f1a-93ec-c75f0dcb0775\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[1, 2, 3],\\n\",\n",
    "       \"       [4, 5, 6],\\n\",\n",
    "       \"       [7, 8, 9]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 198,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"cdbcd3e0-258d-4b55-9f8e-a2045ec29831\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 5 - Transpose c and print out transposed result.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 200,\n",
    "   \"id\": \"70b80d8a-e542-4b3c-9cc4-6bfdee5a7f42\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[1, 4, 7],\\n\",\n",
    "       \"       [2, 5, 8],\\n\",\n",
    "       \"       [3, 6, 9]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 200,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_trans = c.transpose()\\n\",\n",
    "    \"c_trans\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"1ba28e19-7906-429d-a51f-82dc386cbc03\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 6 - Get the dot product of the array c with c. \"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 202,\n",
    "   \"id\": \"8d3ada28-708d-443a-b624-108cb78e5017\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 30,  36,  42],\\n\",\n",
    "       \"       [ 66,  81,  96],\\n\",\n",
    "       \"       [102, 126, 150]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 202,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_dot_prod = np.dot(c, c)\\n\",\n",
    "    \"c_dot_prod\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"503259cd-56f2-48d0-85d1-919cc424b7f2\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 7 - Write the code necessary to sum up the result of c times c transposed. Answer should be 261\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 206,\n",
    "   \"id\": \"04b27b8f-a2ba-46ad-a622-b166783a018a\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"261\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 206,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"c_x_c = c * c_trans\\n\",\n",
    "    \"cxc_sum = c_x_c.sum()\\n\",\n",
    "    \"cxc_sum\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"07384483-0550-4170-80e0-6c0ecbe72938\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \" Exercise 8 - Write the code necessary to determine the product of c times c transposed. Answer should be 131681894400.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 208,\n",
    "   \"id\": \"15877a33-c765-44a7-80fc-73bb70cd4b03\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"131681894400\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 208,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"cxc_prod = c_x_c.prod()\\n\",\n",
    "    \"cxc_prod\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"67587836-7d07-439b-8ce1-7639d3e72024\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"# Setup 4\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"0a348f9a-56cf-4fd3-96a1-7b1b80de1790\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"d = [\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [90, 30, 45, 0, 120, 180],\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [45, -90, -30, 270, 90, 0],\\n\",\n",
    "    \"    \\n\",\n",
    "    \"    [60, 45, -45, 90, -45, 180]\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 209,\n",
    "   \"id\": \"31cfbacb-d217-4adf-89ec-70c58d111744\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 90,  30,  45,   0, 120, 180],\\n\",\n",
    "       \"       [ 45, -90, -30, 270,  90,   0],\\n\",\n",
    "       \"       [ 60,  45, -45,  90, -45, 180]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 209,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d = np.array([\\n\",\n",
    "    \"    [90, 30, 45, 0, 120, 180],\\n\",\n",
    "    \"    [45, -90, -30, 270, 90, 0],\\n\",\n",
    "    \"    [60, 45, -45, 90, -45, 180]\\n\",\n",
    "    \"])\\n\",\n",
    "    \"d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"080d855d-99d6-454b-b686-7badb3352ebd\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 1 - Find the sine of all the numbers in d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 214,\n",
    "   \"id\": \"ece35c7d-e38a-4a52-886a-845642b334fc\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 0.89399666, -0.98803162,  0.85090352,  0.        ,  0.58061118,\\n\",\n",
    "       \"        -0.80115264],\\n\",\n",
    "       \"       [ 0.85090352, -0.89399666,  0.98803162, -0.17604595,  0.89399666,\\n\",\n",
    "       \"         0.        ],\\n\",\n",
    "       \"       [-0.30481062,  0.85090352, -0.85090352,  0.89399666, -0.85090352,\\n\",\n",
    "       \"        -0.80115264]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 214,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_sin = np.sin(d)\\n\",\n",
    "    \"d_sin\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"a75603af-e5b9-41e7-aef3-67972a0d1fa0\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 3 - Find the tangent of all the numbers in dFind the tangent of all the numbers in d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 216,\n",
    "   \"id\": \"0e59f43e-55e7-4465-a1d6-0cc1199c3948\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[-1.99520041, -6.4053312 ,  1.61977519,  0.        ,  0.71312301,\\n\",\n",
    "       \"         1.33869021],\\n\",\n",
    "       \"       [ 1.61977519,  1.99520041,  6.4053312 , -0.17883906, -1.99520041,\\n\",\n",
    "       \"         0.        ],\\n\",\n",
    "       \"       [ 0.32004039,  1.61977519, -1.61977519, -1.99520041, -1.61977519,\\n\",\n",
    "       \"         1.33869021]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 216,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_tan = np.tan(d)\\n\",\n",
    "    \"d_tan\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"35789d2b-5655-49d0-8d12-d006cc9b0cc9\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 4 - Find all the negative numbers in d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 218,\n",
    "   \"id\": \"d3503093-adde-4508-af04-762deb79b2ef\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([-90, -30, -45, -45])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 218,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_neg = d[d < 0]\\n\",\n",
    "    \"d_neg\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"ebb16612-66a5-4ade-8588-b41381eb0d3e\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 5 - Find all the positive numbers in d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 219,\n",
    "   \"id\": \"88e42b75-8351-4677-9d6c-4e41edee7871\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([ 90,  30,  45, 120, 180,  45, 270,  90,  60,  45,  90, 180])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 219,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_pos = d[d>0]\\n\",\n",
    "    \"d_pos\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"34d1c599-d844-483a-894d-77e8b96b3a0c\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 6 - Return an array of only the unique numbers in d.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 223,\n",
    "   \"id\": \"6d98f4fd-2ff1-473e-af3a-6e3c878c9996\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([-90, -45, -30,   0,  30,  45,  60,  90, 120, 180, 270])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 223,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_uniq = np.unique(d)\\n\",\n",
    "    \"d_uniq\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"6e1a462b-4c20-41d2-b1c5-7714a5c35781\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 7 - Determine how many unique numbers there are in d.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 227,\n",
    "   \"id\": \"d8e4e0bd-5bee-43f8-8d5c-9e05b216f03c\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"11\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 227,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_len = len(d_uniq)\\n\",\n",
    "    \"d_len\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"2bfc59cc-9766-41c9-9e43-5bb545da0f2c\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 8 - Print out the shape of d.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 226,\n",
    "   \"id\": \"ce8eb67c-cfbd-494d-b339-cdb23acf93d5\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 90,  30,  45,   0, 120, 180],\\n\",\n",
    "       \"       [ 45, -90, -30, 270,  90,   0],\\n\",\n",
    "       \"       [ 60,  45, -45,  90, -45, 180]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 226,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"44dff88b-69a4-4f07-872a-ebca1fe23c2d\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 9 - Transpose and then print out the shape of d.\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 230,\n",
    "   \"id\": \"eeb1442c-d5d7-4bf1-9719-6675d77d3403\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 90,  45,  60],\\n\",\n",
    "       \"       [ 30, -90,  45],\\n\",\n",
    "       \"       [ 45, -30, -45],\\n\",\n",
    "       \"       [  0, 270,  90],\\n\",\n",
    "       \"       [120,  90, -45],\\n\",\n",
    "       \"       [180,   0, 180]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 230,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_trans = d.transpose()\\n\",\n",
    "    \"d_trans\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"markdown\",\n",
    "   \"id\": \"060126a7-a28f-4915-b713-a5ea115dbb90\",\n",
    "   \"metadata\": {},\n",
    "   \"source\": [\n",
    "    \"Exercise 10 - Reshape d into an array of 9 x 2\"\n",
    "   ]\n",
    "  },\n",
    "  {\n",
    "   \"cell_type\": \"code\",\n",
    "   \"execution_count\": 240,\n",
    "   \"id\": \"4d9c9f44-fae9-4654-bba2-c8d866f2fd9b\",\n",
    "   \"metadata\": {},\n",
    "   \"outputs\": [\n",
    "    {\n",
    "     \"data\": {\n",
    "      \"text/plain\": [\n",
    "       \"array([[ 90,  30],\\n\",\n",
    "       \"       [ 45,   0],\\n\",\n",
    "       \"       [120, 180],\\n\",\n",
    "       \"       [ 45, -90],\\n\",\n",
    "       \"       [-30, 270],\\n\",\n",
    "       \"       [ 90,   0],\\n\",\n",
    "       \"       [ 60,  45],\\n\",\n",
    "       \"       [-45,  90],\\n\",\n",
    "       \"       [-45, 180]])\"\n",
    "      ]\n",
    "     },\n",
    "     \"execution_count\": 240,\n",
    "     \"metadata\": {},\n",
    "     \"output_type\": \"execute_result\"\n",
    "    }\n",
    "   ],\n",
    "   \"source\": [\n",
    "    \"d_rshp = np.reshape(d, (9, 2))\\n\",\n",
    "    \"d_rshp\"\n",
    "   ]\n",
    "  }\n",
    " ],\n",
    " \"metadata\": {\n",
    "  \"kernelspec\": {\n",
    "   \"display_name\": \"Python 3 (ipykernel)\",\n",
    "   \"language\": \"python\",\n",
    "   \"name\": \"python3\"\n",
    "  },\n",
    "  \"language_info\": {\n",
    "   \"codemirror_mode\": {\n",
    "    \"name\": \"ipython\",\n",
    "    \"version\": 3\n",
    "   },\n",
    "   \"file_extension\": \".py\",\n",
    "   \"mimetype\": \"text/x-python\",\n",
    "   \"name\": \"python\",\n",
    "   \"nbconvert_exporter\": \"python\",\n",
    "   \"pygments_lexer\": \"ipython3\",\n",
    "   \"version\": \"3.10.9\"\n",
    "  }\n",
    " },\n",
    " \"nbformat\": 4,\n",
    " \"nbformat_minor\": 5\n",
    "}\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
